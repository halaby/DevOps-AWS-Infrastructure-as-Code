Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    VpcCIDR: 
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.0.0.0/16

    PublicSubnetA1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.0.10.0/24

    PublicSubnetB1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.0.20.0/24

    PrivateSubnetA2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
        Type: String
        Default: 10.0.30.0/24

    PrivateSubnetB2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
        Type: String
        Default: 10.0.40.0/24

Resources:
# Network provisioning 
    VPC: 
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            Tags: 
                - Key: Name 
                  Value: !Ref EnvironmentName
            
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName
            
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnetA1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnetA1CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ-A1)

    PublicSubnetB1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnetB1CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ-B1)

    PrivateSubnetA2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnetA2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ-A2)

    PrivateSubnetB2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnetB2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ-B2)

    NatGatewayA1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties: 
            Domain: vpc

    NatGatewayB1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGatewayA1: 
        Type: AWS::EC2::NatGateway
        Properties: 
            AllocationId: !GetAtt NatGatewayA1EIP.AllocationId
            SubnetId: !Ref PublicSubnetA1

    NatGatewayB1: 
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGatewayB1EIP.AllocationId
            SubnetId: !Ref PublicSubnetB1

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRouteRule: 
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1ARouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnetA1

    PublicSubnet1BRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnetB1

    PrivateRouteTableA2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ-A2)

    DefaultPrivateRouteRuleA2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTableA2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGatewayA1

    PrivateSubnetA2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTableA2
            SubnetId: !Ref PrivateSubnetA2

    PrivateRouteTableB2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ-B2)

    DefaultPrivateRouteRuleB2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTableB2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGatewayB1
            
    PrivateSubnetB2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTableB2
            SubnetId: !Ref PrivateSubnetB2

# Server, security group, LB provisioning 
    LBSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our load balancer
        VpcId: !Ref VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

    WebSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our hosts and SSH from local only
        VpcId: !Ref VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

    AppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            echo "it works! Udagram, Udacity" > index.html
        ImageId: ami-0ee23bfc74a881de5
        SecurityGroups:
        - Ref: WebSG
        InstanceType: t3.medium
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'

    WebAppGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier: 
        - !Join [ ",", [ !Ref PrivateSubnetA2, !Ref PrivateSubnetB2 ]]
        LaunchConfigurationName:
          Ref: AppLaunchConfig
        MinSize: '4'
        MaxSize: '8'
        TargetGroupARNs:
        - Ref: WebAppTargetGroup

    WebAppLB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Subnets:
        - !Ref PublicSubnetA1
        - !Ref PublicSubnetB1
        SecurityGroups:
        - Ref: LBSG

    Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
        LoadBalancerArn:
          Ref: WebAppLB
        Port: '80'
        Protocol: HTTP

    ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

    WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 8
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId: !Ref VPC
            
Outputs: 

    WebAppLBDNSName:
      Description: add http:// to LB DNS Name
      Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
      Export:
        Name: !Sub ${EnvironmentName}-LB-DNSName

    VPC: 
        Description: A reference to the created VPC
        Value: !Ref VPC
        Export:
          Name: !Sub ${EnvironmentName}-VPCID

    VPCPublicRouteTable:
        Description: Public Routing
        Value: !Ref PublicRouteTable
        Export:
          Name: !Sub ${EnvironmentName}-PUB-RT

    VPCPrivateRouteTableA1:
        Description: Private Routing AZ A
        Value: !Ref PrivateRouteTableA2
        Export:
          Name: !Sub ${EnvironmentName}-PRI-A2-RT

    VPCPrivateRouteTableB2:
        Description: Private Routing AZ B
        Value: !Ref PrivateRouteTableB2
        Export:
          Name: !Sub ${EnvironmentName}-PRI-B2-RT

    PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [ ",", [ !Ref PublicSubnetA1, !Ref PublicSubnetB1 ]]
        Export:
          Name: !Sub ${EnvironmentName}-PUB-NETS

    PrivateSubnets:
        Description: A list of the private subnets
        Value: !Join [ ",", [ !Ref PrivateSubnetA2, !Ref PrivateSubnetB2 ]]
        Export:
          Name: !Sub ${EnvironmentName}-PRIV-NETS

    PublicSubnetA1:
        Description: A reference to the public subnet in the A Availability Zone
        Value: !Ref PublicSubnetA1
        Export:
          Name: !Sub ${EnvironmentName}-PUB-A1-SN

    PublicSubnetB1: 
        Description: A reference to the public subnet in the B Availability Zone
        Value: !Ref PublicSubnetB1
        Export:
          Name: !Sub ${EnvironmentName}-PUB-B1-SN

    PrivateSubnetA2:
        Description: A reference to the private subnet in the A Availability Zone
        Value: !Ref PrivateSubnetA2
        Export:
          Name: !Sub ${EnvironmentName}-PRI-A2-SN

    PrivateSubnetB2: 
        Description: A reference to the private subnet in the B Availability Zone
        Value: !Ref PrivateSubnetB2
        Export:
          Name: !Sub ${EnvironmentName}-PRI-B2-SN